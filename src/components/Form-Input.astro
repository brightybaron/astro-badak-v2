---
import MainLayout from "@layouts/MainLayout.astro";
---

<MainLayout title="Create">
  <form
    id="create-post-form"
    class="max-w-3xl mx-auto p-6 bg-white rounded-md shadow-md"
    method="POST"
    enctype="multipart/form-data"
  >
    <h2 class="text-2xl font-bold mb-4">Create New Post</h2>

    {/* Title */}
    <div class="mb-4">
      <label class="block font-medium text-gray-700" for="title"> Title </label>
      <input
        type="text"
        id="title"
        name="title"
        class="mt-1 block w-full py-1 px-2 text-sm border border-gray-300 rounded-md"
        placeholder="Post title"
        required
      />
    </div>

    {/* Jenis Trip */}
    <div class="mb-4">
      <label class="block font-medium text-gray-700" for="jenistrip">
        Jenis Trip
      </label>
      <select
        id="jenistrip"
        name="jenistrip"
        class="mt-1 block w-full py-1 px-2 text-sm border border-gray-300 rounded-md"
        required
      >
        <option value="">-</option>
        <option value="Private Trip">Private Trip</option>
        <option value="Open Trip">Open Trip</option>
      </select>
    </div>

    <div class="flex justify-between gap-2">
      {/* Mepo */}
      <div class="mb-4 w-full">
        <label class="block font-medium text-gray-700" for="mepo">
          Meeting Point
        </label>
        <input
          type="text"
          id="mepo"
          name="mepo"
          class="mt-1 block w-full py-1 px-2 text-sm border border-gray-300 rounded-md"
          placeholder="Meeting point"
          required
        />
      </div>
    </div>

    {/* Destinasi */}
    <div class="mb-4">
      <label class="block font-medium text-gray-700" for="destinasi">
        Destinasi
      </label>
      <textarea
        id="destinasi"
        name="destinasi"
        rows={3}
        class="mt-1 block w-full py-1 px-2 text-sm border border-gray-300 rounded-md"
        placeholder="Destinations (comma separated) e.g. Kawah, Pasir Putih"
        required></textarea>
    </div>

    {/* Fasilitas */}
    <p class="block font-medium text-gray-700">Fasilitas</p>
    <div class="flex sm:flex-nowrap flex-wrap justify-between gap-2">
      {/* Include */}
      <div class="mb-4 w-full">
        <label class="block text-sm font-medium text-gray-700" for="start">
          Include
        </label>
        <textarea
          rows={3}
          id="include"
          name="include"
          class="mt-1 block w-full py-1 px-2 text-sm border border-gray-300 rounded-md"
          placeholder="Include (comma separated) e.g. Dokumentasi, Tiket masuk"
          required></textarea>
      </div>

      {/* Exclude */}
      <div class="mb-4 w-full">
        <label class="block text-sm font-medium text-gray-700" for="end">
          Exclude
        </label>
        <textarea
          rows={3}
          id="exclude"
          name="exclude"
          class="mt-1 block w-full py-1 px-2 text-sm border border-gray-300 rounded-md"
          placeholder="Exclude (comma separated) e.g. Tip sopir, Parkir"
          required></textarea>
      </div>
    </div>

    {/* Prices */}
    <div class="mb-4">
      <label class="block font-medium text-gray-700" for="prices">
        Prices
      </label>
      <input
        type="text"
        id="prices"
        name="prices"
        class="mt-1 block w-full py-1 px-2 text-sm border border-gray-300 rounded-md"
        placeholder="Prices (comma separated) e.g. 350, 600, 1.000, 2.000"
        required
      />
    </div>

    <!-- Photos -->
    <div class="mb-4 w-full">
      <label
        for="file-upload"
        class="block font-medium leading-6 text-gray-900"
      >
        Photos
      </label>
      <div
        class="mt-2 flex justify-center rounded-lg border border-dashed border-gray-900/25 px-6 py-10"
      >
        <div class="text-center">
          <svg
            class="mx-auto h-12 w-12 text-gray-300"
            viewBox="0 0 24 24"
            fill="currentColor"
            aria-hidden="true"
          >
            <path
              fill-rule="evenodd"
              d="M1.5 6a2.25 2.25 0 012.25-2.25h16.5A2.25 2.25 0 0122.5 6v12a2.25 2.25 0 01-2.25 2.25H3.75A2.25 2.25 0 011.5 18V6zM3 16.06V18c0 .414.336.75.75.75h16.5A.75.75 0 0021 18v-1.94l-2.69-2.689a1.5 1.5 0 00-2.12 0l-.88.879.97.97a.75.75 0 11-1.06 1.06l-5.16-5.159a1.5 1.5 0 00-2.12 0L3 16.061zm10.125-7.81a1.125 1.125 0 112.25 0 1.125 1.125 0 01-2.25 0z"
              clip-rule="evenodd"></path>
          </svg>
          <div class="mt-4 flex justify-center text-sm leading-6 text-gray-600">
            <label
              for="photos"
              class="relative cursor-pointer rounded-md bg-white font-semibold text-indigo-600 focus-within:outline-none focus-within:ring-2 focus-within:ring-indigo-600 focus-within:ring-offset-2 hover:text-indigo-500"
            >
              <span>Upload a file</span>
              <input
                id="photos"
                name="photos"
                type="file"
                multiple
                class="sr-only"
                accept="image/*"
                required
              />
            </label>
            <p class="pl-1">or drag and drop</p>
          </div>
          <p class="text-xs leading-5 text-gray-600">
            PNG, JPG, GIF up to 10MB
          </p>
          <!-- <div id="selected-images" class="mt-2 grid grid-cols-3 gap-2">
            {
              selectedImages.map((file, index) => (
                <div key={index} class="relative m-2">
                  <img
                    src={URL.createObjectURL(file)}
                    alt={file.name}
                    class="h-auto w-48 object-cover"
                  />
                  <button
                    type="button"
                    class="remove-image-btn absolute top-2 right-2 bg-red-600 text-white rounded-full p-1"
                    onClick={() => handleRemoveImage(index)}
                    aria-label="Remove Image"
                  >
                    X
                  </button>
                </div>
              ))
            }
          </div> -->
          <div id="image-preview" class="mt-2 grid grid-cols-3 gap-2"></div>
        </div>
      </div>
    </div>

    <!-- Itineraries -->
    <div id="itineraries">
      <p class="block font-medium text-gray-700">Itinerary</p>
      <button type="button" id="add-day">+ Add Day</button>
    </div>

    <div id="description-form">
      <label for="description-0" class="block font-medium text-gray-700"
        >Deskripsi</label
      >
      <div class="description-field">
        <textarea
          id="description-0"
          name="description-0"
          rows="2"
          class="block w-full py-1 px-2 text-sm border border-gray-300 rounded-md"
          placeholder="Lorem ipsum dolor sit amet... (1)"
          required></textarea>
        <button
          type="button"
          class="remove-description-btn text-red-700 hover:text-red-700"
          >Remove</button
        >
      </div>
      <button
        type="button"
        id="add-description-btn"
        class="mt-2 text-sm font-bold text-blue-500 hover:text-blue-700"
        >+ Add Description</button
      >
    </div>

    <!-- Submit Button -->
    <div class="mt-6">
      <button type="submit">Submit</button>
    </div>
  </form>
</MainLayout>

<script>
  // State-like variables
  let selectedImages = [];
  let itineraries = [[{ time: "", details: "" }]];

  // Handle file uploads
  document.getElementById("photos").addEventListener("change", (e) => {
    const files = Array.from((e.target as HTMLInputElement).files).filter(
      (file) => file.size <= 10 * 1024 * 1024
    );
    if (files.length + selectedImages.length > 6) {
      alert("You can only upload up to 6 images.");
      return;
    }
    selectedImages = [...selectedImages, ...files].slice(0, 6);
    updateImagePreview();
  });

  function updateImagePreview() {
    const preview = document.getElementById("image-preview");
    preview.innerHTML = ""; // Clear existing previews
    selectedImages.forEach((file, index) => {
      const img = document.createElement("img");
      img.src = URL.createObjectURL(file);
      img.alt = file.name;
      img.width = 100;

      const removeBtn = document.createElement("button");
      removeBtn.innerText = "Remove";
      removeBtn.addEventListener("click", () => handleRemoveImage(index));

      const container = document.createElement("div");
      container.appendChild(img);
      container.appendChild(removeBtn);
      preview.appendChild(container);
    });
  }

  function handleRemoveImage(index) {
    selectedImages.splice(index, 1);
    updateImagePreview();
  }

  // Itinerary Handling
  const itinerariesContainer = document.getElementById("itineraries");
  document.getElementById("add-day").addEventListener("click", () => {
    itineraries.push([{ time: "", details: "" }]);
    updateItineraries();
  });

  function updateItineraries() {
    itinerariesContainer.innerHTML = ""; // Clear previous content
    itineraries.forEach((day, dayIndex) => {
      const dayContainer = document.createElement("div");
      dayContainer.innerHTML = `<h4>Day ${dayIndex + 1}</h4>`;
      day.forEach((item, itemIndex) => {
        const timeInput = document.createElement("input");
        timeInput.placeholder = "Time";
        timeInput.value = item.time;
        timeInput.addEventListener("input", (e) => {
          itineraries[dayIndex][itemIndex].time = (
            e.target as HTMLInputElement
          ).value;
        });

        const detailsInput = document.createElement("input");
        detailsInput.placeholder = "Details";
        detailsInput.value = item.details;
        detailsInput.addEventListener("input", (e) => {
          itineraries[dayIndex][itemIndex].details = (
            e.target as HTMLInputElement
          ).value;
        });

        const removeBtn = document.createElement("button");
        removeBtn.innerText = "Remove Itinerary";
        removeBtn.addEventListener("click", () =>
          handleRemoveItinerary(dayIndex, itemIndex)
        );

        dayContainer.appendChild(timeInput);
        dayContainer.appendChild(detailsInput);
        dayContainer.appendChild(removeBtn);
      });

      const addItineraryBtn = document.createElement("button");
      addItineraryBtn.innerText = "+ Add Itinerary";
      addItineraryBtn.addEventListener("click", () => {
        itineraries[dayIndex].push({ time: "", details: "" });
        updateItineraries();
      });

      itinerariesContainer.appendChild(dayContainer);
      itinerariesContainer.appendChild(addItineraryBtn);
    });
  }

  function handleRemoveItinerary(dayIndex, itemIndex) {
    itineraries[dayIndex].splice(itemIndex, 1);
    updateItineraries();
  }

  document.addEventListener("DOMContentLoaded", function () {
    const descriptionForm = document.getElementById("description-form");
    const addDescriptionBtn = document.getElementById("add-description-btn");

    // Add new description field
    addDescriptionBtn.addEventListener("click", () => {
      const descriptionFields =
        descriptionForm.querySelectorAll(".description-field");
      const index = descriptionFields.length;

      const descriptionField = document.createElement("div");
      descriptionField.classList.add("description-field");

      descriptionField.innerHTML = `
      <textarea
        id="description-${index}"
        name="description-${index}"
        rows="2"
        class="block w-full py-1 px-2 text-sm border border-gray-300 rounded-md"
        placeholder="Lorem ipsum dolor sit amet... (${index + 1})"
        required
      ></textarea>
      <button type="button" class="remove-description-btn text-red-700 hover:text-red-700">Remove</button>
    `;

      descriptionForm.insertBefore(descriptionField, addDescriptionBtn);

      // Attach event listener to the new remove button
      descriptionField
        .querySelector(".remove-description-btn")
        .addEventListener("click", () => {
          descriptionField.remove();
        });
    });

    // Remove description field
    descriptionForm.addEventListener("click", function (e) {
      if (
        (e.target as HTMLElement).classList.contains("remove-description-btn")
      ) {
        (e.target as HTMLElement).parentElement.remove();
      }
    });
  });

  // Form Submission
  document
    .getElementById("create-post-form")
    .addEventListener("submit", async (e) => {
      e.preventDefault();

      const formData = new FormData(e.target as HTMLFormElement);
      itineraries.forEach((day, index) => {
        formData.append(`itinerary_day_${index}`, JSON.stringify(day));
      });
      selectedImages.forEach((file, index) => {
        formData.append(`photos[${index}]`, file);
      });

      const response = await fetch("/api/create-post", {
        method: "POST",
        body: formData,
      });

      if (response.ok) {
        alert("Post created successfully!");
        window.location.href = "/dashboard";
      } else {
        alert("Error creating post.");
      }
    });
</script>
